- name: create computer - check
  computer:
    name: MyComputer
    state: present
  register: create_comp_check
  check_mode: true

- name: get result of create computer - check
  object_info:
    identity: '{{ create_comp_check.distinguished_name }}'
  register: create_comp_check_actual

- name: assert create computer - check
  assert:
    that:
    - create_comp_check is changed
    - create_comp_check.distinguished_name == 'CN=MyComputer,CN=Computers,' ~ setup_domain_info.output[0].defaultNamingContext
    - create_comp_check.object_guid == '00000000-0000-0000-0000-000000000000'
    - create_comp_check.sid == 'S-1-5-0000'
    - create_comp_check_actual.objects == []

- name: create computer
  computer:
    name: MyComputer
    state: present
  register: create_comp

- set_fact:
    object_identity: '{{ create_comp.object_guid }}'

- name: get result of create computer
  object_info:
    identity: '{{ object_identity }}'
    properties:
    - dnsHostName
    - objectSid
    - sAMAccountName
    - userAccountControl
  register: create_comp_actual

- name: assert create computer
  assert:
    that:
    - create_comp is changed
    - create_comp_actual.objects | length == 1
    - create_comp.distinguished_name == 'CN=MyComputer,CN=Computers,' ~ setup_domain_info.output[0].defaultNamingContext
    - create_comp.object_guid == create_comp_actual.objects[0].ObjectGUID
    - create_comp.sid == create_comp_actual.objects[0].objectSid.Sid
    - create_comp_actual.objects[0].DistinguishedName == create_comp.distinguished_name
    - create_comp_actual.objects[0].Name == 'MyComputer'
    - create_comp_actual.objects[0].dnsHostName == None
    - create_comp_actual.objects[0].sAMAccountName == 'MyComputer$'
    - create_comp_actual.objects[0].ObjectClass == 'computer'
    - '"ADS_UF_ACCOUNTDISABLE" not in create_comp_actual.objects[0].userAccountControl_AnsibleFlags'

- name: remove computer - check
  computer:
    name: MyComputer
    state: absent
  register: remove_comp_check
  check_mode: true

- name: get result of remove computer - check
  object_info:
    identity: '{{ object_identity }}'
  register: remove_comp_check_actual

- name: assert remove computer - check
  assert:
    that:
    - remove_comp_check is changed
    - remove_comp_check_actual.objects | length == 1

- name: remove computer
  computer:
    name: MyComputer
    state: absent
  register: remove_comp

- name: get result of remove computer
  object_info:
    identity: '{{ object_identity }}'
  register: remove_comp_actual

- name: assert remove computer
  assert:
    that:
    - remove_comp is changed
    - remove_comp_actual.objects == []

- name: remove computer - idempotent
  computer:
    name: MyComputer
    state: absent
  register: remove_comp_again

- name: assert remove computer - idempotent
  assert:
    that:
    - not remove_comp_again is changed

- name: create computer with custom options
  computer:
    name: MyComputer
    state: present
    delegates:
      set:
      - CN=krbtgt,CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
      - CN=Administrator,CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
    kerberos_encryption_types:
      set:
      - aes128
      - aes256
    location: Comp Location
    dns_hostname: MyComputer.domain.com
    enabled: false
    managed_by: Domain Admins
    sam_account_name: SamMyComputer
    spn:
      set:
      - HTTP/MyComputer
    trusted_for_delegation: true
    upn: MyComputer@{{ domain_realm }}
    path: CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
    protect_from_deletion: true
  register: custom_comp

- set_fact:
    object_identity: '{{ custom_comp.object_guid }}'

- name: get result of create computer with custom options
  object_info:
    identity: '{{ object_identity }}'
    properties:
    - dnsHostName
    - location
    - managedBy
    - msDS-AllowedToActOnBehalfOfOtherIdentity
    - msDS-SupportedEncryptionTypes
    - objectSid
    - ProtectedFromAccidentalDeletion
    - sAMAccountName
    - servicePrincipalName
    - userAccountControl
    - userPrincipalName
  register: custom_comp_actual

- name: convert delegate SDDL to human readable string
  ansible.windows.win_powershell:
    parameters:
      SDDL: '{{ custom_comp_actual.objects[0]["msDS-AllowedToActOnBehalfOfOtherIdentity"] }}'
    script: |
      param($SDDL)

      $sd = New-Object -TypeName System.DirectoryServices.ActiveDirectorySecurity
      $sd.SetSecurityDescriptorSddlForm($SDDL, 'All')
      $sd.GetAccessRules($true, $false, [Type][System.Security.Principal.NTAccount]
      ).IdentityReference.Value | ForEach-Object {
          ($_ -split '\\', 2)[-1].ToLowerInvariant()
      } | Sort-Object
  register: custom_comp_delegates

- name: assert create computer with custom options
  assert:
    that:
    - custom_comp is changed
    - custom_comp.distinguished_name == 'CN=MyComputer,CN=Users,' ~ setup_domain_info.output[0].defaultNamingContext
    - custom_comp.object_guid == custom_comp_actual.objects[0].ObjectGUID
    - custom_comp.sid == custom_comp_actual.objects[0].objectSid.Sid
    - custom_comp_actual.objects[0].DistinguishedName == custom_comp.distinguished_name
    - custom_comp_actual.objects[0].Name == 'MyComputer'
    - custom_comp_actual.objects[0].dnsHostName == 'MyComputer.domain.com'
    - custom_comp_actual.objects[0].location == 'Comp Location'
    - custom_comp_actual.objects[0].managedBy == 'CN=Domain Admins,CN=Users,' ~ setup_domain_info.output[0].defaultNamingContext
    - custom_comp_actual.objects[0]['msDS-SupportedEncryptionTypes'] == 24
    - custom_comp_actual.objects[0]['msDS-SupportedEncryptionTypes_AnsibleFlags'] == ["AES128_CTS_HMAC_SHA1_96", "AES256_CTS_HMAC_SHA1_96"]
    - custom_comp_actual.objects[0].sAMAccountName == 'SamMyComputer$'
    - custom_comp_actual.objects[0].ObjectClass == 'computer'
    - custom_comp_actual.objects[0].ProtectedFromAccidentalDeletion == true
    - custom_comp_actual.objects[0].servicePrincipalName == 'HTTP/MyComputer'
    - custom_comp_actual.objects[0].userPrincipalName == 'MyComputer@' ~ domain_realm
    - '"ADS_UF_ACCOUNTDISABLE" in custom_comp_actual.objects[0].userAccountControl_AnsibleFlags'
    - '"ADS_UF_TRUSTED_FOR_DELEGATION" in custom_comp_actual.objects[0].userAccountControl_AnsibleFlags'
    - custom_comp_delegates.output == ["administrator", "krbtgt"]

- name: change computer with custom options
  computer:
    name: MyComputer
    path: CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
    delegates:
      set:
      - CN=KRBTGT,CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
    dns_hostname: other.domain.com
    kerberos_encryption_types:
      set:
      - aes256
      - rc4
    location: comp location
    enabled: true
    sam_account_name: MyComputer2$
    trusted_for_delegation: false
    upn: mycomputer@{{ domain_realm }}
    protect_from_deletion: false
  register: change_comp

- name: get result of change computer with custom options
  object_info:
    identity: '{{ object_identity }}'
    properties:
    - dnsHostName
    - location
    - msDS-AllowedToActOnBehalfOfOtherIdentity
    - msDS-SupportedEncryptionTypes
    - ProtectedFromAccidentalDeletion
    - sAMAccountName
    - userAccountControl
    - userPrincipalName
  register: change_comp_actual

- name: convert delegate SDDL to human readable string
  ansible.windows.win_powershell:
    parameters:
      SDDL: '{{ change_comp_actual.objects[0]["msDS-AllowedToActOnBehalfOfOtherIdentity"] }}'
    script: |
      param($SDDL)

      $sd = New-Object -TypeName System.DirectoryServices.ActiveDirectorySecurity
      $sd.SetSecurityDescriptorSddlForm($SDDL, 'All')
      $sd.GetAccessRules($true, $false, [Type][System.Security.Principal.NTAccount]
      ).IdentityReference.Value | ForEach-Object {
          ($_ -split '\\', 2)[-1].ToLowerInvariant()
      } | Sort-Object
  register: change_comp_delegates

- name: assert change computer with custom options
  assert:
    that:
    - change_comp is changed
    - change_comp_actual.objects[0].dnsHostName == 'other.domain.com'
    - change_comp_actual.objects[0].location == 'comp location'
    - change_comp_actual.objects[0]['msDS-SupportedEncryptionTypes'] == 20
    - change_comp_actual.objects[0]['msDS-SupportedEncryptionTypes_AnsibleFlags'] == ["RC4_HMAC", "AES256_CTS_HMAC_SHA1_96"]
    - change_comp_actual.objects[0].ProtectedFromAccidentalDeletion == false
    - change_comp_actual.objects[0].sAMAccountName == 'MyComputer2$'
    - change_comp_actual.objects[0].userPrincipalName == 'mycomputer@' ~ domain_realm
    - '"ADS_UF_ACCOUNTDISABLE" not in change_comp_actual.objects[0].userAccountControl_AnsibleFlags'
    - '"ADS_UF_TRUSTED_FOR_DELEGATION" not in change_comp_actual.objects[0].userAccountControl_AnsibleFlags'
    - change_comp_delegates.output == ["krbtgt"]

- name: add and remove list options
  computer:
    name: MyComputer
    path: CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
    delegates:
      add:
      - CN=Administrator,CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
      remove:
      - CN=KRBTGT,CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
      - CN=Missing,{{ setup_domain_info.output[0].defaultNamingContext }}
    kerberos_encryption_types:
      add:
      - aes128
      - aes256
      remove:
      - rc4
  register: add_remove_list

- name: get result of add and remove list options
  object_info:
    identity: '{{ object_identity }}'
    properties:
    - msDS-AllowedToActOnBehalfOfOtherIdentity
    - msDS-SupportedEncryptionTypes
  register: add_remove_list_actual

- name: convert delegate SDDL to human readable string
  ansible.windows.win_powershell:
    parameters:
      SDDL: '{{ add_remove_list_actual.objects[0]["msDS-AllowedToActOnBehalfOfOtherIdentity"] }}'
    script: |
      param($SDDL)

      $sd = New-Object -TypeName System.DirectoryServices.ActiveDirectorySecurity
      $sd.SetSecurityDescriptorSddlForm($SDDL, 'All')
      $sd.GetAccessRules($true, $false, [Type][System.Security.Principal.NTAccount]
      ).IdentityReference.Value | ForEach-Object {
          ($_ -split '\\', 2)[-1].ToLowerInvariant()
      } | Sort-Object
  register: add_remove_list_delegation

- name: assert add and remove list options
  assert:
    that:
    - add_remove_list is changed
    - add_remove_list_actual.objects[0]['msDS-SupportedEncryptionTypes'] == 24
    - add_remove_list_actual.objects[0]['msDS-SupportedEncryptionTypes_AnsibleFlags'] == ["AES128_CTS_HMAC_SHA1_96", "AES256_CTS_HMAC_SHA1_96"]
    - add_remove_list_delegation.output == ["administrator"]

- name: add and remove list options - idempotent
  computer:
    name: MyComputer
    path: CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
    delegates:
      add:
      - CN=Administrator,CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
      remove:
      - CN=KRBTGT,CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
      - CN=Missing,{{ setup_domain_info.output[0].defaultNamingContext }}
    kerberos_encryption_types:
      add:
      - aes128
      - aes256
      remove:
      - rc4
  register: add_remove_list_again

- name: assert add and remove list options - idempotent
  assert:
    that:
    - not add_remove_list_again is changed

- name: unset list options
  computer:
    name: MyComputer
    path: CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
    delegates:
      set: []
    kerberos_encryption_types:
      set: []
  register: unset_list_options

- name: get result of unset list options
  object_info:
    identity: '{{ object_identity }}'
    properties:
    - msDS-AllowedToActOnBehalfOfOtherIdentity
    - msDS-SupportedEncryptionTypes
  register: unset_list_options_actual

- name: assert unset list options
  assert:
    that:
    - unset_list_options is changed
    - unset_list_options_actual.objects[0]['msDS-AllowedToActOnBehalfOfOtherIdentity'] == None
    - unset_list_options_actual.objects[0]['msDS-SupportedEncryptionTypes'] == 0
    - unset_list_options_actual.objects[0]['msDS-SupportedEncryptionTypes_AnsibleFlags'] == ["None"]

- name: unset list options - idempotent
  computer:
    name: MyComputer
    path: CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
    delegates:
      set: []
    kerberos_encryption_types:
      set: []
  register: unset_list_options_again

- name: assert unset list options - idempotent
  assert:
    that:
    - not unset_list_options_again is changed

- name: set spns
  computer:
    name: MyComputer
    path: CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
    spn:
      set:
      - HTTP/host
      - HTTP/host.domain
      - HTTP/host.domain:8080
  register: spn_set

- name: get result of set spns
  object_info:
    identity: '{{ object_identity }}'
    properties:
    - servicePrincipalName
  register: spn_set_actual

- name: assert set spns
  assert:
    that:
    - spn_set is changed
    - spn_set_actual.objects[0].servicePrincipalName == ['HTTP/host.domain:8080', 'HTTP/host.domain', 'HTTP/host']

- name: remove spns
  computer:
    name: MyComputer
    path: CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
    spn:
      remove:
      - HTTP/fake
      - HTTP/Host.domain
  register: spn_remove

- name: get result of remove spns
  object_info:
    identity: '{{ object_identity }}'
    properties:
    - servicePrincipalName
  register: spn_remove_actual

- name: assert remove spns
  assert:
    that:
    - spn_remove is changed
    - spn_remove_actual.objects[0].servicePrincipalName == ['HTTP/host.domain:8080', 'HTTP/host']

- name: add spns
  computer:
    name: MyComputer
    path: CN=Users,{{ setup_domain_info.output[0].defaultNamingContext }}
    spns:
      add:
      - HTTP/Host.domain:8080
      - HTTP/fake
  register: spn_add

- name: get result of add spns
  object_info:
    identity: '{{ object_identity }}'
    properties:
    - servicePrincipalName
  register: spn_add_actual

- name: assert add spns
  assert:
    that:
    - spn_add is changed
    - spn_add_actual.objects[0].servicePrincipalName == ['HTTP/fake', 'HTTP/host.domain:8080', 'HTTP/host']
